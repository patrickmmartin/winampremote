// winamp remote control suite ©Patrick Michael Martin 2000
//
// RPCFuncsU.cpp
//
// contains wrappers for the MIDL generated stubs
//

#pragma hdrstop
// problem to fix definition of __try in generated c stubs

#define __try try

#include "RPCFuncsU.h"
#include "winampinterface.h"    // header file generated by MIDL compiler
#include "RPCErrors.h"

// hard-coded for tcpip
unsigned char * pszProtocolSequence = (unsigned char *) "ncacn_ip_tcp";
// global string binding information
unsigned char * StringBinding = NULL;

// this binds to the interface , and assigns to the interface handle
void __stdcall Bind(unsigned char * NetworkAddress, unsigned char * EndPoint)
{
  // avoid leaking handles ?
  if (StringBinding)
    UnBind();

  RpcStringBindingCompose(NULL, pszProtocolSequence, NetworkAddress, EndPoint, NULL, &StringBinding);
  RpcBindingFromStringBinding(StringBinding, &winamp_IfHandle);

}

// this unbinds to the interface after the RPC call
void __stdcall UnBind()
{
    RpcStringFree(&StringBinding);
    StringBinding = NULL;
    RpcBindingFree(&winamp_IfHandle);
  }

// send a string
void __stdcall SendString(char * pszString)
{
  RpcTryExcept
  {
      WAMessageProc( (unsigned char *) pszString);
  }
  RpcExcept(1)
  {
      throw ERPCException(RPCError(RpcExceptionCode()));
  }
  RpcEndExcept;

}

// execute a message
void __stdcall ExecuteMessage(char * pszString, int command)
{

  RpcTryExcept
  {
     WAExecuteMessage((unsigned char *) pszString, command);
  }
  RpcExcept(1)
  {
      throw ERPCException(RPCError(RpcExceptionCode()));
  }
  RpcEndExcept

}

// execute a string message
void __stdcall ExecuteStringMessage(char * pszString, char * pszParam, int command)
{

  RpcTryExcept
  {
      WAExecuteMessageString((unsigned char *) pszString, (unsigned char *) pszParam, command);
  }
  RpcExcept(1)
  {
      throw ERPCException(RPCError(RpcExceptionCode()));
  }
  RpcEndExcept
}

// get the result of a string command
int __stdcall StringResult(char * pszString, int command, int data)
{

int result = 0;

  RpcTryExcept
  {
      result = WAStringResult((unsigned char *) pszString, command, data);
  }
  RpcExcept(1)
  {
      throw ERPCException(RPCError(RpcExceptionCode()));
  }
  RpcEndExcept
  return result;
}

// get result of a command
int __stdcall IntegerResult(char * pszString, int command, int data)
{

  int result = 0;

  RpcTryExcept
  {
     result = WAIntegerResult((unsigned char *) pszString, command, data);
  }
  RpcExcept(1)
  {
      throw ERPCException(RPCError(RpcExceptionCode()));
  }
  RpcEndExcept
  return result;
}

// shutdown server
void __stdcall Shutdown(void)
{

  RpcTryExcept
  {
      WAShutdown();
  }
  RpcExcept(1)
  {
      throw ERPCException(RPCError(RpcExceptionCode()));
  }
  RpcEndExcept
}

// stub memory allocation functions
void  __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
    return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
    free(ptr);
}


