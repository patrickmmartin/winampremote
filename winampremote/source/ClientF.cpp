//---------------------------------------------------------------------------
#include <vcl.h>
#include <malloc.h>
#pragma hdrstop

#include "ClientF.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"


// problem with definition of __try
#define __try try

#include "winampinterface.h"    // header file generated by MIDL compiler
#include "winampinterface_c.c"   // needed to link in the stub functions - why?


TfrmMain *frmMain;
//---------------------------------------------------------------------------
__fastcall TfrmMain::TfrmMain(TComponent* Owner)
    : TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TfrmMain::btnMessageProcClick(TObject *Sender)
{

  unsigned char * pszString = (unsigned char * ) "hello, world";

  AddMessage("sending a big hello");
  MessageProc(pszString);

}
//---------------------------------------------------------------------------

void __fastcall TfrmMain::btnExecuteMessageClick(TObject *Sender)
{
  char * pszString = "hello, world";
  AddMessage("sending a big hello");
  ExecuteMessage( (unsigned char *) pszString, 0);
}

//---------------------------------------------------------------------------

void __fastcall TfrmMain::btnExecuteStringMessageClick(TObject *Sender)
{
  char * pszString = "hello, world";
  char * pszParam = "a parameter";
  AddMessage("sending a big hello");
  ExecuteStringMessage( (unsigned char *) pszString, (unsigned char *) pszParam, 0, 0);
}

//---------------------------------------------------------------------------
void __fastcall TfrmMain::btnStringResultClick(TObject *Sender)
{
  char * pszString = "hello, world";
  AddMessage("sending a big hello");
  StringResult( (unsigned char *) pszString, 0, 0);
  AddMessage("received response");
  AddMessage(pszString);
}

//---------------------------------------------------------------------------
void __fastcall TfrmMain::btnIntegerResultClick(TObject *Sender)
{
  char * pszString = "hello, world";
  int result = 0;
  AddMessage("sending a big hello");
  IntegerResult( (unsigned char *) pszString, 0, 0);
  AddMessage("received response");
  AddMessage(AnsiString(result).c_str());
}


//---------------------------------------------------------------------------

void __fastcall TfrmMain::btnShutdownClick(TObject *Sender)
{
  WAShutdown();
}

//---------------------------------------------------------------------------

void AddMessage(char * pszString){
   frmMain->memMessages->Lines->Add(AnsiString(pszString));
//   delete pszString;
  }


/* global string binding information */
  unsigned char * pszStringBinding    = NULL;
  unsigned char * pszProtocolSequence = ( unsigned char * ) "ncacn_ip_tcp";
  unsigned char * pszNetworkAddress   = ( unsigned char * ) "localhost";
  unsigned char * pszEndpoint         = ( unsigned char * ) "8000";

/* this binds to the interface before the RPC call*/
void Bind(){

    RpcStringBindingCompose(NULL, pszProtocolSequence, pszNetworkAddress, pszEndpoint, NULL, &pszStringBinding);
    RpcBindingFromStringBinding(pszStringBinding, &winamp_IfHandle);
}

/* this unbinds to the interface after the RPC call*/
void UnBind(){

    RpcStringFree(&pszStringBinding);
    RpcBindingFree(&winamp_IfHandle);
  }


void MessageProc(unsigned char * pszString){

    RpcTryExcept
    {
        WAMessageProc(pszString);
    }
    RpcExcept(1)
    {
        AddMessage("RPC run-time exception code");
//        AddMessage(AnsiString(RpcExceptionCode()).c_str());
    }
    RpcEndExcept;

  }


void ExecuteMessage(unsigned char * pszString, int command){

    RpcTryExcept
    {
        WAExecuteMessage(pszString, command);
    }
    RpcExcept(1)
    {
        AddMessage("RPC run-time exception code");
    }
    RpcEndExcept

  }


void ExecuteStringMessage(unsigned char * pszString, unsigned char * pszParam, int command, int data){

    RpcTryExcept
    {
         WAExecuteMessageString(pszString, pszParam, command);
    }
    RpcExcept(1)
    {
        AddMessage("RPC run-time exception code");
    }
    RpcEndExcept

  }



int StringResult(unsigned char * pszString, int command, int data){

    RpcTryExcept
    {
        WAStringResult(pszString, command, data);
    }
    RpcExcept(1)
    {
        AddMessage("RPC run-time exception code");
//        AddMessage(AnsiString(RpcExceptionCode()).c_str());
    }
    RpcEndExcept

    return 0;

  }

int IntegerResult(unsigned char * pszString, int command, int data){

  int result = 0;

    RpcTryExcept
    {
        result = WAIntegerResult(pszString, command, data);
    }
    RpcExcept(1)
    {
        AddMessage("RPC run-time exception code");
//        AddMessage(AnsiString(RpcExceptionCode()).c_str());
    }
    RpcEndExcept

    return result;

  }



void Shutdown(void){

    RpcTryExcept
    {
        Shutdown();
    }
    RpcExcept(1)
    {
        AddMessage("RPC run-time exception code");
//        AddMessage(AnsiString(RpcExceptionCode()).c_str());
    }
    RpcEndExcept


}

void  __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
    return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
    free(ptr);
}
//---------------------------------------------------------------------------


void __fastcall TfrmMain::FormCreate(TObject *Sender)
{
  Bind();
}
//---------------------------------------------------------------------------

void __fastcall TfrmMain::FormDestroy(TObject *Sender)
{
  UnBind();

}
//---------------------------------------------------------------------------

void __fastcall TfrmMain::btnMessageProcLotsClick(TObject *Sender)
{

  for (int i = 0 ; i < 1000 ; i++){
    btnMessageProcClick(NULL);
    }
}
//---------------------------------------------------------------------------

