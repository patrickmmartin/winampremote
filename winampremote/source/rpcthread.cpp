//---------------------------------------------------------------------------
#include <vcl.h>
#include <malloc.h>
#include <stdio.h>
#pragma hdrstop

// problem with definition of __try - this gets round out with not problems
#define __try try


#include "winampinterface.h"    // header file generated by MIDL compiler
#include "winampinterface_s.c" // needed for the interface spec vars - why?

#include "rpcthread.h"
#include "ServerF.h"
#pragma package(smart_init)

// winamp interface
#include "waint.h"

//RPC errors
# include "RPCErrors.h"

/* note that the use of const for in only strings
 seems to break the ability to match the function signature, and leads to linker errors*/

/* __RPC_FAR is literally nothing, but is left in for consistency
- none of the MIDL generated code should need direct modification*/

void WAMessageProc(
    /* [string][out][in] */ unsigned char __RPC_FAR *pszString)
{
  MainStatus("executing request");
  AnsiString str = (char *) pszString;
  str += " sent hello";
  MainMessage(str.c_str());
  MainStatus("welcome from the winamp RPC server");
  MainStatus("listening...");
}


void WAExecuteMessage( 
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [in] */ long command)
{
  MainStatus("executing request");
  AnsiString str = (char *) pszString;
  str += " sent  - command : ";
  str += command;
  MainMessage( str.c_str());

  // identify command?
  //execute command
  ExecuteMessage(command);
  MainStatus("listening...");

}


void WAExecuteMessageString( 
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [string][in] */ unsigned char __RPC_FAR *pszParam,
    /* [in] */ long command)
{
  MainStatus("executing request");
  AnsiString str = (char *) pszString;
  str += " sent  - command : ";
  str += command;
  str += " - parameter : ";
  str += (char *) pszParam;
  MainMessage( str.c_str());

//  delete pszString;

  ExecuteStringMessage( (char *) pszParam, command);
  MainStatus("listening...");

}

long WAIntegerResult( 
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [in] */ long command,
    /* [in] */ long data)
{
  MainStatus("executing request");
  AnsiString str = (char *) pszString;
  str += " sent  - command : ";
  str += command;
  str += " - data : ";
  str += data;
  MainMessage( str.c_str());

  // identify command?
  //execute command
  MainStatus("listening...");
  return GetAmpInt(command, data);

}

long WAStringResult( 
    /* [string][out][in] */ unsigned char __RPC_FAR *pszString,
    /* [in] */ long command,
    /* [in] */ long data)
{
  char * retval;
  MainStatus("executing request");
  AnsiString str = (char *) pszString;
  str += " sent  - command : ";
  str += command;
  str += " - data : ";
  str += data;

  MainMessage( str.c_str());

  retval = "cannot obtain strings out of process";

  str = retval;
  str += " returned";

  MainMessage (str.c_str());

  // identify command?

  //execute command
  if (retval)
    strcpy((char *) pszString, retval);
  else
    sprintf((char *) pszString,  "command %d data %d (null)", command, data);

  /* return status*/

  MainStatus("listening...");
  return 0;

}

// new functions

void WASetStringList( 
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [in][size_is] */ byte __RPC_FAR Buffer[  ],
    /* [in] */ unsigned long BufferLength,
    /* [in] */ long command)
{

  {
     try
     {            // test for C++ exceptions
        try
        {         // test for C-based structured exceptions
         MainStatus("executing request");

          TStringList * StringList = new TStringList;
          try
          {
            StringList->Text = (char *) Buffer;

            for (int i = 0 ; i < StringList->Count ; i++)
            {
                  ExecuteStringMessage( (char *) StringList->Strings[i].c_str(), command);
            }

            
          }
          __finally
          {
            delete StringList;
          }

          MainStatus("listening...");
        }

        __except(1)
        {
          throw(Exception(AnsiString("structured exception generated in WASetList() : " + SysErrorMessage(RpcExceptionCode()))));
        }
     }
     catch ( Exception &E )
     {
       OutputDebugString(E.Message.c_str());
      }
    }

}


void WAGetStringList( 
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [out] */ BUFFER __RPC_FAR *pBuffer,
    /* [in] */ long command)
{

  {
     try
     {            // test for C++ exceptions
        try
        {         // test for C-based structured exceptions
         MainStatus("executing request");

          TStringList * StringList = new TStringList;
          try
          {
            try
            {
              // get all items in list

              for (int i = 0 ; i < GetAmpInt(IPC_GETLISTLENGTH, 0); i++ )
              {
                StringList->Add(AnsiString("string #") + i);
              }

              char * Buffer = StringList->GetText();
              if (Buffer)
              {
                pBuffer->BufferLength = StringList->Text.Length() + 1;
                pBuffer->Buffer = (unsigned char *) Buffer;
              }
            }
            __finally
            {
              delete StringList;
            }
          }
          catch(...)
          {
            throw(Exception(AnsiString("exception generated in WAGetList() : " + SysErrorMessage(GetLastError()))));
          }

          MainStatus("listening...");
        }

        __except(1)
        {
          throw(Exception(AnsiString("structured exception generated in WAGetList() : " + SysErrorMessage(RpcExceptionCode()))));
        }
     }
     catch ( Exception &E )
     {
       OutputDebugString(E.Message.c_str());
      }
    }

}


void WAGetStringDataList( 
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [out] */ BUFFER __RPC_FAR *pBuffer,
    /* [in] */ long stringcommand,
    /* [in] */ long datacommand,
    /* [in] */ long datadata)
{

  {
     try
     {            // test for C++ exceptions
        try
        {         // test for C-based structured exceptions
         MainStatus("executing request");

          TStringList * StringList = new TStringList;
          try
          {
            try
            {
              // get all items in list

              for (int i = 0 ; i < GetAmpInt(IPC_GETLISTLENGTH, 0); i++ )
              {
                StringList->Add(AnsiString("string #") + i);
              }

              char * Buffer = StringList->GetText();
              if (Buffer)
              {
                pBuffer->BufferLength = StringList->Text.Length() + 1;
                pBuffer->Buffer = (unsigned char *) Buffer;
              }
            }
            __finally
            {
              delete StringList;
            }
          }
          catch(...)
          {
            throw(Exception(AnsiString("exception generated in WAGetList() : " + SysErrorMessage(GetLastError()))));
          }

          MainStatus("listening...");
        }

        __except(1)
        {
          throw(Exception(AnsiString("structured exception generated in WAGetList() : " + SysErrorMessage(RpcExceptionCode()))));
        }
     }
     catch ( Exception &E )
     {
       OutputDebugString(E.Message.c_str());
      }
    }

}


void WAShutdown(void)
{
    RpcMgmtStopServerListening(NULL);
    RpcServerUnregisterIf(NULL, NULL, FALSE);
    MainStatus("not listening");
    MainMessage("asked to close");
    PostMessage(mainhwnd, WM_CLOSE, 0, 0);
}


//---------------------------------------------------------------------------
__fastcall TRPCServerThread::TRPCServerThread(bool CreateSuspended)
    : TThread(CreateSuspended)
{
}
//---------------------------------------------------------------------------
void __fastcall TRPCServerThread::Execute()
{

AnsiString str;

RPC_STATUS status;

    //---- Place thread code here ----
    MainStatus("initialising...");

    str = "winamp version : ";
    str += GetWinampVersion();

    MainMessage(str.c_str());

    // should check status codes here for previously registered interfaces

//    status = RpcServerUseProtseqEp( (unsigned char *) "ncacn_ip_tcp", 20, (unsigned char *) "33000", NULL);
    status = RpcServerUseProtseqEp( (unsigned char *) "ncacn_np", 20, (unsigned char *) "\\pipe\\winampremote", NULL);



    if (status == RPC_S_OK){
      status = RpcServerRegisterIf(winamp_v1_0_s_ifspec, NULL, NULL);
      if (status == RPC_S_OK){
        MainStatus("listening...");
        status = RpcServerListen(1, 20, FALSE);
        if (status != RPC_S_OK){
          MainMessage("error in listening");
          MainMessage(RPCError(status));
          }
        }
    else{
      MainMessage("failed to register interface");
      MainMessage(RPCError(status));
      MainStatus("initialise failed");
      }
    }
  else{
    MainMessage("failed to create protocol sequence");
    MainMessage(RPCError(status));
    MainStatus("initialise failed");
  }

}



void __fastcall MainMessage(char * msgString)
{
// do something with the passed string
  PostMessage(mainhwnd, WM_THREAD_MESSAGE, 0, (long) strdup(msgString));
}
//---------------------------------------------------------------------------

void __fastcall MainStatus(char * msgString)
{
// do something with the passed string
  PostMessage(mainhwnd, WM_THREAD_STATUS, 0, (long) strdup(msgString));
}


void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
    return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
    free(ptr);
}

//---------------------------------------------------------------------------
