/*
winamp remote control suite ©Patrick Michael Martin 2000, 2001, 2002

Copyright (C) 2000,2001,2002  Patrick M. Martin

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Patrick M. Martin may be reached by email at patrickmmartin@freenet.co.uk.
*/

#include <vcl.h>
#pragma hdrstop

#include "PlaylistF.h"
#include "waint.h"
#include "MainF.h"
#include "SplashF.h"
#include "RPCFuncsU.h"
#include "shellapi.h"
#include "remotestrs.hpp"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

// turn off warnings
#include "winampinterface.h"    // header file generated by MIDL compiler




const int Offset = 4;

TfrmPlaylist *frmPlaylist;
//---------------------------------------------------------------------------
__fastcall TfrmPlaylist::TfrmPlaylist(TComponent* Owner)
    : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::SongsRefresh(TObject *Sender)
{
  if ((frmSplash) && (frmSplash->Visible))
  {
    frmSplash->lblMessage->Caption = Remotestrs_sGettingPlaylist;
    frmSplash->Update();
  }

  lstSongs->Items->BeginUpdate();
  try
  {
    try
    {

      Screen->Cursor = crHourGlass;
      frmMain->Querying = true;
      frmMain->IconHandle();
      frmMain->sbMain->Update();
      frmMain->TrayMessage(NIM_MODIFY);


      lastlength = IntegerResult(frmMain->IdentChars, IPC_GETLISTLENGTH, 0);
      lastindex = currentpos;
      currentpos = IntegerResult(frmMain->IdentChars, IPC_GETLISTPOS, 0);

      lstSongs->Items->Clear();

      void * buf = NULL;
      int bufsize = 0;

      GetList(frmMain->IdentChars, &buf, bufsize, IPC_GETPLAYLISTTITLE);

        SongList->Clear();
      if (bufsize)
        SongList->Text = (char *) buf;

      lstSongs->Items = SongList;

      if (buf)
        delete buf;

    }
    catch( ERPCException &E)
    {
      lstSongs->Items->Text = AnsiString().sprintf(Remotestrs_sListUnobtainable.c_str(), E.Message.c_str());
    }


  }
  __finally
  {
    Screen->Cursor = crDefault;

    frmMain->Querying = false;
    frmMain->IconHandle();
    frmMain->sbMain->Update();

    frmMain->TrayMessage(NIM_MODIFY);

    lstSongs->Items->EndUpdate();
    if ((frmSplash) && (frmSplash->Visible))
    {
      frmSplash->lblMessage->Caption = Remotestrs_sGettingPlaylist;
      frmSplash->Update();
    }
  }

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::lstSongsDblClick(TObject *Sender)
{
  IntegerResult(frmMain->IdentChars, IPC_SETPLAYLISTPOS, lstSongs->ItemIndex);
  ExecuteMessage(frmMain->IdentChars, WINAMP_PLAYENTRY);

}
//---------------------------------------------------------------------------


void __fastcall TfrmPlaylist::mnuSortClick(TObject *Sender)
{
// these *STILL* don't bleeding work!
  if (Sender == mnuSort)
  {
    IntegerResult(frmMain->IdentChars, IDC_SORT_FILETITLE, 0);
  }
  if (Sender == mnuSortFile)
  {
    IntegerResult(frmMain->IdentChars, IDC_SORT_FILENAME, 0);
  }
  if (Sender == mnuSortFileEntire)
  {
    IntegerResult(frmMain->IdentChars, IDC_SORT_ENTIREFILENAME, 0);
  }

  SongsRefresh(this);
}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::FormCreate(TObject *Sender)
{

  lstSongs->ItemHeight = this->Canvas->TextHeight('W');
  SongList = new TStringList;
  SongsRefresh(this);

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::DeleteSelected(void)
{
int i;

  Screen->Cursor = crAppStart;
  TStringList * StringList = new TStringList;
  try
  {
  /* rather wasteful, as we have to get all the undeleted items and resend them to winamp*/

    void * buf = NULL;
    int bufsize = 0;

    GetList(frmMain->IdentChars, &buf, bufsize, IPC_GETPLAYLISTFILE);

    if (bufsize)
      StringList->Text = (char *) buf;

    if (buf)
      delete buf;

    int playingpos = currentpos;

    for (i = lstSongs->Items->Count - 1 ; i >= 0 ; i--)
    {
      if (lstSongs->Selected[i])
      {
        StringList->Delete(i);
         if (i < playingpos)
            playingpos--;
      }
    } // for

    // delete current
    IntegerResult(frmMain->IdentChars, IPC_DELETE, 0);

    // add remaining
    AddFiles(StringList);
    // reset position

    IntegerResult(frmMain->IdentChars, IPC_SETPLAYLISTPOS, playingpos);

    SongsRefresh(this);
  }
  __finally
  {
    delete StringList;
    Screen->Cursor = crDefault;
  }

}

//---------------------------------------------------------------------------


void __fastcall TfrmPlaylist::lstSongsDrawItem(TWinControl *Control,
      int Index, TRect &Rect, TOwnerDrawState State)
{
  AnsiString ItemText = AnsiString(Index + 1) + ". " + ((TListBox *)Control)->Items->Strings[Index];
  TCanvas *pCanvas = ((TListBox *)Control)->Canvas;
  pCanvas->FillRect(Rect);

  if (Index == currentpos)
  {
    pCanvas->Font->Color = clRed;
  }
  pCanvas->TextOut(Rect.Left + Offset, Rect.Top, ItemText);
  pCanvas->Font->Color = clWindowText;

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::DropFiles(TMessage& Msg)
{
  char CFileName[MAX_PATH];
  int len, i;
  TStringList * Files = new TStringList;
  void * hDrop = (void *) Msg.WParam;
  int NewPos;

  TPoint DropPoint;

  int DropIndex;
  DragQueryPoint(hDrop, &DropPoint);

  // this returns -1 if there was a hit item
  DropIndex = lstSongs->ItemAtPos(DropPoint, true);

  // get the top of the list
  if (DropIndex > -1)
    GetFilenames(0, DropIndex, Files);
  else
    GetFilenames(0, lstSongs->Items->Count, Files);

  try
  {
    len = DragQueryFile((void *) hDrop, 0xFFFFFFFF, NULL, 0);
    for (i = 0 ; i < len ; i++){
      if (DragQueryFile((void *) hDrop, i, CFileName, MAX_PATH) > 0){
        Files->Add(CFileName);
        }
      }

  // get the rest of the list;
  if (DropIndex > -1)
    GetFilenames(DropIndex, lstSongs->Items->Count, Files);

    // delete
    IntegerResult(frmMain->IdentChars, IPC_DELETE, 0);

    AddFiles(Files);
  // reset position here

  NewPos = Files->IndexOfObject((TObject *) true);
  IntegerResult(frmMain->IdentChars, IPC_SETPLAYLISTPOS, NewPos);


    SongsRefresh(this);

    }
  __finally
  {
    DragFinish((void *) Msg.WParam);
    delete Files;
  }

}

//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::AddFiles(TStringList * Files)
{

  Screen->Cursor = crHourGlass;
  try
  {
    SendList(frmMain->IdentChars, Files->Text.c_str(), Files->Text.Length() + 1, IPC_PLAYFILE);
  }
  __finally
  {
    Screen->Cursor = crDefault;
  }


}

//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::SongIndexUpdate(TObject *Sender)
{

  char title[RET_STR_SIZE];
  // needed to ensure we can see the currently playing track
  try
  {
    lstSongs->Items->BeginUpdate();
     strcpy(title, frmMain->IdentChars);
     // update the current title, at least
     StringResult(title, IPC_GETPLAYLISTTITLE, currentpos);

     if ((lstSongs->Items->Count - 1) > currentpos)
     {
       bool Selected = lstSongs->Selected[currentpos];
       lstSongs->Items->Strings[currentpos] = (AnsiString(currentpos + 1) + ". " + title);
       lstSongs->Selected[currentpos] =  Selected;
     }


    /*much neater...*/
    lstSongs->TopIndex = currentpos - 2;
    lstSongs->Update();

  }
  __finally
  {
    lstSongs->Items->EndUpdate();
  }
}

//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::FormClose(TObject *Sender,
      TCloseAction &Action)
{
  frmMain->ViewPlaylist->Execute();
}
//---------------------------------------------------------------------------


void __fastcall TfrmPlaylist::GetFilenames(int Start, int Stop, TStringList * StringList)
{
int i;

char filename[RET_STR_SIZE];
char saveident[RET_STR_SIZE];

  // cache this
  strcpy(saveident, frmMain->IdentChars);

  for (i = Start ; i < Stop; i++)
  {
    strcpy(filename, saveident);
    StringResult(filename, IPC_GETPLAYLISTFILE, i);
    StringList->AddObject(filename, (TObject*) (i == currentpos));
  } // for

}


//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::lstSongsDragOver(TObject *Sender,
      TObject *Source, int X, int Y, TDragState State, bool &Accept)
{
  Accept = true;
}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::lstSongsDragDrop(TObject *Sender,
      TObject *Source, int X, int Y)
{
int i;

char filename[RET_STR_SIZE];
char saveident[RET_STR_SIZE];
bool CurrentSong;
int NewPos;

  // want to know if exceed the list length
  int DropIndex = lstSongs->ItemAtPos(TPoint(X, Y), false);


  TStringList * TopList = new TStringList;
  TStringList * MiddleList = new TStringList;
  TStringList * BottomList = new TStringList;
  try
  {
  /* rather wasteful, as we have to get all the undeleted items and resend them to winamp*/

    // cache this
  strcpy(saveident, frmMain->IdentChars);

    for (i = 0 ; i < lstSongs->Items->Count; i++)
    {
      strcpy(filename, saveident);
      StringResult(filename, IPC_GETPLAYLISTFILE, i);
      CurrentSong = i == currentpos;

      if (lstSongs->Selected[i])
      {
        MiddleList->AddObject(filename, (TObject *) CurrentSong);
      }
      else if (i < DropIndex)
      {
        TopList->AddObject(filename, (TObject *) CurrentSong);
      }
      else
      {
        BottomList->AddObject(filename, (TObject *) CurrentSong);
      }
    } // for

    // delete
    IntegerResult(frmMain->IdentChars, IPC_DELETE, 0);

    // rebuild list
    TopList->AddStrings(MiddleList);
    TopList->AddStrings(BottomList);
  // reset position

  AddFiles(TopList);

  NewPos = TopList->IndexOfObject((TObject *) true);
  IntegerResult(frmMain->IdentChars, IPC_SETPLAYLISTPOS, NewPos);

  SongsRefresh(this);
  }
  __finally
  {
    delete BottomList;
    delete MiddleList;
    delete TopList;
  }
}
//---------------------------------------------------------------------------


void __fastcall TfrmPlaylist::FormStartDock(TObject *Sender,
      TDragDockObject *&DragObject)
{
  frmMain->StartDock(Sender, DragObject);
        
}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::FormShow(TObject *Sender)
{
  // need to re-assert this
  DragAcceptFiles(lstSongs->Handle, true);
//  pbSongPos->ControlStyle >> csCaptureMouse;

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::FormEndDock(TObject *Sender, TObject *Target,
      int X, int Y)
{
  frmMain->EndDock(Sender, Target, X, Y);
}
//---------------------------------------------------------------------------


void __fastcall TfrmPlaylist::lstSongsMouseMove(TObject *Sender,
      TShiftState Shift, int X, int Y)
{

  int Index = lstSongs->ItemAtPos(TPoint(X, Y), true);

  if (Index > -1)
  {
    if (lstSongs->Canvas->TextWidth(lstSongs->Items->Strings[Index]) > lstSongs->ClientWidth - Offset)
    {
      lstSongs->Hint = lstSongs->Items->Strings[Index];
    }
    else
      lstSongs->Hint = "";

  }
  else
  {
    lstSongs->Hint = Remotestrs_sPlaylistHint;
  }

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::mnuPlayClick(TObject *Sender)
{

  if (BelowIndex > -1)
  {
    lstSongs->ItemIndex = BelowIndex;
    lstSongsDblClick(this);
  }



}
//---------------------------------------------------------------------------


void __fastcall TfrmPlaylist::pmnuSongsPopup(TObject *Sender)
{

  BelowIndex = lstSongs->ItemAtPos(lstSongs->ScreenToClient(Mouse->CursorPos), true);
  mnuPlay->Enabled = (BelowIndex > -1);
  if (BelowIndex > -1)
    mnuPlay->Caption = lstSongs->Items->Strings[BelowIndex];
  else
    mnuPlay->Caption = Remotestrs_sPlay;


}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::lstSongsKeyDown(TObject *Sender, WORD &Key,
      TShiftState Shift)
{

  switch (Key)
  {
    case VK_DELETE:
      DeleteSelected(); break;
    case 13 :
      lstSongsDblClick(this);
  }

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::StatsUpdate(void)
{

  int SongS = IntegerResult (frmMain->IdentChars, IPC_GETOUTPUTTIME, 1);

  if ((SongS) && (!fDragging))
  {
    int PosMS = IntegerResult (frmMain->IdentChars, IPC_GETOUTPUTTIME, 0);
    pbSongPos->Position = (pbSongPos->Max * PosMS) / (SongS * 1000);
  }

  if (lstSongs->Items->Count > 1)
    pbListPos->Position = (pbListPos->Max * currentpos) / (lstSongs->Items->Count - 1);
  else
    pbListPos->Position = 0;
}


void __fastcall TfrmPlaylist::pbSongPosMouseUp(TObject *Sender,
      TMouseButton Button, TShiftState Shift, int X, int Y)
{

  if (fDragging)
  {
    if (PtInRect(&(pbSongPos->ClientRect), TPoint(X,Y)))
    {
      int SongS = IntegerResult (frmMain->IdentChars, IPC_GETOUTPUTTIME, 1);
      IntegerResult(frmMain->IdentChars, IPC_JUMPTOTIME, ( (1000 *  SongS *  X) / pbSongPos->ClientWidth));
    }
  }

  fDragging = false;

}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::pbSongPosMouseMove(TObject *Sender,
      TShiftState Shift, int X, int Y)
{

  if (fDragging)
  {
    if (PtInRect(&(pbSongPos->ClientRect), TPoint(X,Y)))
    {
      pbSongPos->Position = (pbSongPos->Max *  X) / pbSongPos->ClientWidth;
    }
  }


}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::pbSongPosMouseDown(TObject *Sender,
      TMouseButton Button, TShiftState Shift, int X, int Y)
{
  fDragging = true;
}
//---------------------------------------------------------------------------

void __fastcall TfrmPlaylist::FormDestroy(TObject *Sender)
{
  delete SongList;        
}
//---------------------------------------------------------------------------

