
Pause
{
  if (WAStatus == IntegerResult(IdentChars, IPC_ISPLAYING, 0))
    ExecuteMessage(IdentChars, WINAMP_PAUSE);
}



SayHello
{
  SendString(IdentChars);
}


Play
{
  ExecuteMessage(IdentChars, WINAMP_PLAYENTRY);
}



Next
{
  ExecuteMessage(IdentChars, WINAMP_NEXT);
}



Previous
{
  ExecuteMessage(IdentChars, WINAMP_PREVIOUS);
}






Stop
{
  ExecuteMessage(IdentChars, WINAMP_STOP);
}




Forward5
{
  ExecuteMessage(IdentChars, WINAMP_FORWARD5S);
}




Back5
{
  ExecuteMessage(IdentChars, WINAMP_BACK5S);
}




VolumeUp
{
  // TODO grab code from the 
  frmSettings->tbVolume->Position++;
}




VolumeDown
{
  // TODO grab code from the 
  frmSettings->tbVolume->Position--;
}




VolumeUpMore
{
  // TODO grab code from the 
  frmSettings->tbVolume->Position+=10;
}




VolumeDownMore
{
  // TODO grab code from the 
  frmSettings->tbVolume->Position-=10;
}




PlaylistStart
{
  ExecuteMessage(IdentChars, WINAMP_STARTOFPLAYLIST);
}




PlaylistEnd
{
  ExecuteMessage(IdentChars, WINAMP_ENDOFPLAYLIST);
}




DeletePlayList
{
  IntegerResult(IdentChars, IPC_DELETE, 0);
}





StopFade
{
  ExecuteMessage(IdentChars, WINAMP_STOPFADE);
}




StopAfterCurrent
{
  ExecuteMessage(IdentChars, WINAMP_STOPAFTERCURRENT);
}






SetVolume0
{
  frmSettings->tbVolume->Position = 0;

}




SetVolume100
{
  frmSettings->tbVolume->Position = 255;
}




Shuffle
{
  // shuffle / repeat status only works in very recent versions,
  // so always do for older
  if ( (WinampVerNo < 0x2604) || (Shuffle->Checked == IntegerResult(IdentChars, IPC_GETSHUFFLEOPTION, 0)) )
    ExecuteMessage(IdentChars, WINAMP_FILE_SHUFFLE);
}




Repeat
{
  // shuffle / repeat status only works in very recent versions,
  // so always do for older
  if  ( (WinampVerNo < 0x2604) || (Repeat->Checked == IntegerResult(IdentChars, IPC_GETREPEATOPTION, 0)) )
    ExecuteMessage(IdentChars, WINAMP_FILE_REPEAT);
}




PlayFromStart
{
  IntegerResult(IdentChars, IPC_STARTPLAY, 0);
}




Half
{
  frmSettings->tbVolume->Position = 128;
}



RefreshEQ
{
  //todo grab the code from that form
   frmSettings->UpdateBars();
}





Autoload
{
  Autoload->Checked = !Autoload->Checked;
  IntegerResult(IdentChars, IPC_GETEQDATA, 11);
  IntegerResult(IdentChars, IPC_SETEQDATA, Autoload->Checked );
}





NewSong
{
  // gets the index from the playlist form
  IntegerResult(IdentChars, IPC_SETPLAYLISTPOS, frmPlaylist->lstSongs->ItemIndex);
  Play->Execute();

}





PlaylistRefreshStats
{

  int SongS = IntegerResult(frmMain->IdentChars, IPC_GETOUTPUTTIME, 1);

  if ((SongS) && (!frmPlaylist->Dragging))
  {
    int PosMS = IntegerResult (frmMain->IdentChars, IPC_GETOUTPUTTIME, 0);
    frmPlaylist->pbSongPos->Position = (frmPlaylist->pbSongPos->Max * PosMS) / (SongS * 1000);
  }

  if (frmPlaylist->lstSongs->Items->Count > 1)
    frmPlaylist->pbListPos->Position = (frmPlaylist->pbListPos->Max * CurrentIndex) /
                                       (frmPlaylist->lstSongs->Items->Count - 1);
  else
    frmPlaylist->pbListPos->Position = 0;

  // time
  frmPlaylist->sbPlaylist->Panels->Items[1]->Text = TimeToStr(Time());
  // current song length
  frmPlaylist->sbPlaylist->Panels->Items[3]->Text = TimeToStr((float) SongS / SecsPerDay);

}



