#include <malloc.h>
#include <stdio.h>
#pragma hdrstop

// problem with definition of __try - this gets round out with no problems
#define __try try


#include "winampinterface.h"    // header file generated by MIDL compiler

#include "testimp.h"

// winamp interface
#include "waint.h"

//RPC errors
# include "RPCErrors.h"

#include "ConsoleCallObserver.h"

#include "WinampTestServer.h"

// this code is only used in the out of process test process
WinampRemote::Server::WinampTestServer localWinamp;



static void inline MainMessage(char * msgString);
static void inline MainStatus(char * msgString);



/* __RPC_FAR is literally nothing, but is left in for consistency
- none of the MIDL generated code should need direct modification*/

void WAMessageProc(
    /* [string][in] */ unsigned char __RPC_FAR *pszString)
{

  AnsiString str = (char *) pszString;
  str += " sent hello";
  MainMessage(str.c_str());

}


void WAExecuteMessage(
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [in] */ long command)
{

  AnsiString str = (char *) pszString;
  str += " sent  - command : ";
  str += WinampCommandDesc(command);
  MainMessage( str.c_str());
  localWinamp.ExecuteCommand( static_cast<WinampCommand>(command) );

}


void WAExecuteMessageString(
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [string][in] */ unsigned char __RPC_FAR *pszParam,
    /* [in] */ long command)
{

  AnsiString str = (char *) pszString;
  str += " sent  - command : ";
  str += WinampCommandDesc(command);
  str += " - parameter : ";
  str += (char *) pszParam;
  MainMessage( str.c_str());

  localWinamp.ExecuteStringCommand(pszParam, static_cast<WinampCommand>(command) );


}

long WAIntegerResult(
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [in] */ long command,
    /* [in] */ long data)
{

  AnsiString str = (char *) pszString;
  str += " sent  - query : ";
  str += WinampCommandDesc(command);
  str += " - data : ";
  str += data;

  MainMessage( str.c_str());

  return localWinamp.QueryInt( (WinampCommand) command, data);

}

long WAStringResult( 
    /* [string][out][in] */ unsigned char __RPC_FAR pszString[ 260 ],
    /* [in] */ long command,
    /* [in] */ long data)
{
  AnsiString str = (char *) pszString;
  str += " sent  - query : ";
  str += WinampCommandDesc(command);
  str += " - data : ";
  str += data;

  MainMessage( str.c_str());

  str = localWinamp.QueryString( static_cast<WinampCommand>(command), data).c_str();

  MainMessage (str.c_str());

  strcpy((char *) pszString, str.c_str());
  /* return status*/

  return 0;

}

// new functions

void WASetStringList(
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [in][size_is] */ byte __RPC_FAR Buffer[  ],
    /* [in] */ unsigned long BufferLength,
    /* [in] */ long command)
{

  {
     try
     {            // test for C++ exceptions
        try
        {         // test for C-based structured exceptions


          TStringList * StringList = new TStringList;
          try
          {
            StringList->Text = (char *) Buffer;

            for (int i = 0 ; i < StringList->Count ; i++)
            {
                  // TODO implement mock execution for playlist title and playlist file
            }


          }
          __finally
          {
            delete StringList;
          }

          MainStatus("listening...");
        }

        __except(1)
        {
          throw(Exception(AnsiString("structured exception generated in WASetList() : " + SysErrorMessage(RpcExceptionCode()))));
        }
     }
     catch ( Exception &E )
     {
       OutputDebugString(E.Message.c_str());
      }
    }

}


void WAGetStringList(
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [out] */ BUFFER __RPC_FAR *pBuffer,
    /* [in] */ long command)
{

  {
     try
     {            // test for C++ exceptions
        try
        {         // test for C-based structured exceptions


          TStringList * StringList = new TStringList;
          try
          {
            try
            {
              // get all items in list

              for (int i = 0 ; i < 20; i++ )
              {
                StringList->Add(AnsiString("string #") + i);
              }

              char * Buffer = StringList->GetText();
              if (Buffer)
              {
                pBuffer->BufferLength = StringList->Text.Length() + 1;
                pBuffer->Buffer = (unsigned char *) Buffer;
              }
            }
            __finally
            {
              delete StringList;
            }
          }
          catch(...)
          {
            throw(Exception(AnsiString("exception generated in WAGetList() : " + SysErrorMessage(GetLastError()))));
          }

          MainStatus("listening...");
        }

        __except(1)
        {
          throw(Exception(AnsiString("structured exception generated in WAGetList() : " + SysErrorMessage(RpcExceptionCode()))));
        }
     }
     catch ( Exception &E )
     {
       OutputDebugString(E.Message.c_str());
      }
    }

}


void WAGetStringDataList(
    /* [string][in] */ unsigned char __RPC_FAR *pszString,
    /* [out] */ BUFFER __RPC_FAR *pBuffer,
    /* [in] */ long stringcommand,
    /* [in] */ long datacommand,
    /* [in] */ long datadata)
{

  {
     try
     {            // test for C++ exceptions
        try
        {         // test for C-based structured exceptions


          TStringList * StringList = new TStringList;
          try
          {
            try
            {
              // get all items in list

              for (int i = 0 ; i < 20; i++ )
              {
                StringList->Add(AnsiString("string #") + i);
              }

              char * Buffer = StringList->GetText();
              if (Buffer)
              {
                pBuffer->BufferLength = StringList->Text.Length() + 1;
                pBuffer->Buffer = (unsigned char *) Buffer;
              }
            }
            __finally
            {
              delete StringList;
            }
          }
          catch(...)
          {
            throw(Exception(AnsiString("exception generated in WAGetList() : " + SysErrorMessage(GetLastError()))));
          }

          MainStatus("listening...");
        }

        __except(1)
        {
          throw(Exception(AnsiString("structured exception generated in WAGetList() : " + SysErrorMessage(RpcExceptionCode()))));
        }
     }
     catch ( Exception &E )
     {
       OutputDebugString(E.Message.c_str());
      }
    }

}


void WAShutdown(void)
{
    RpcMgmtStopServerListening(NULL);
    RpcServerUnregisterIf(NULL, NULL, FALSE);
    MainStatus("not listening");
    MainMessage("asked to close");
}


__fastcall TRPCServerThread::TRPCServerThread(bool CreateSuspended)
    : TThread(CreateSuspended)
{
}

void __fastcall TRPCServerThread::Execute()
{

    AnsiString str;
    RPC_STATUS status;
    unsigned char * protocol_seq_np = "ncacn_np";
//    unsigned char * protocol_seq_ip_tcp = "ncacn_ip_tcp";

    MainStatus("initialising...");

    str = "winamp version : test";

    MainMessage(str.c_str());

    // should check status codes here for previously registered interfaces
    // need a property of the appropriate type for the endpoint
    status = RpcServerUseProtseqEp(protocol_seq_np,
                                   20,
                                   (unsigned char *) "\\pipe\\winampremote", NULL);

    if (status == RPC_S_OK){
      status = RpcServerRegisterIf(winamp_v1_0_s_ifspec, NULL, NULL);
      if (status == RPC_S_OK){
        MainStatus("listening...");
        status = RpcServerListen(1, 20, FALSE);
        if (status != RPC_S_OK){
          MainMessage("error in listening");
          MainMessage(RPCError(status));
          }
        }
    else{
      MainMessage("failed to register interface");
      MainMessage(RPCError(status));
      MainStatus("initialise failed");
      }
    }
  else{
    MainMessage("failed to create protocol sequence");
    MainMessage(RPCError(status));
    MainStatus("initialise failed");
  }

}



static void inline MainMessage(char * msgString)
{
  TRPCServerThread::CallObserver.notifyMessage(msgString);
}

static void inline MainStatus(char * msgString)
{
  TRPCServerThread::CallObserver.notifyStatus(msgString);
}


/* required user alloc / free function pair */
void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
    return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
    free(ptr);
}

ConsoleCallObserver cco;
ICallObserver& TRPCServerThread::CallObserver = cco;


 
